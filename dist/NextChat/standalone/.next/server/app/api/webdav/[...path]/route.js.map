{"version":3,"file":"app/api/webdav/[...path]/route.js","mappings":"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","sources":["webpack://_N_E/external commonjs \"node:async_hooks\"","webpack://_N_E/external commonjs \"node:buffer\"","webpack://_N_E/./app/api/webdav/[...path]/route.ts","webpack://_N_E/./app/api/webdav/[...path]/route.ts?f40e","webpack://_N_E/?ee2a","webpack://_N_E/<anon>"],"sourcesContent":["module.exports = require(\"node:async_hooks\");","module.exports = require(\"node:buffer\");","import { NextRequest, NextResponse } from \"next/server\";\r\nimport { STORAGE_KEY, internalAllowedWebDavEndpoints } from \"../../../constant\";\r\nimport { getServerSideConfig } from \"@/app/config/server\";\r\n\r\nconst config = getServerSideConfig();\r\n\r\nconst mergedAllowedWebDavEndpoints = [\r\n  ...internalAllowedWebDavEndpoints,\r\n  ...config.allowedWebDavEndpoints,\r\n].filter((domain) => Boolean(domain.trim()));\r\n\r\nconst normalizeUrl = (url: string) => {\r\n  try {\r\n    return new URL(url);\r\n  } catch (err) {\r\n    return null;\r\n  }\r\n};\r\n\r\nasync function handle(\r\n  req: NextRequest,\r\n  { params }: { params: { path: string[] } },\r\n) {\r\n  if (req.method === \"OPTIONS\") {\r\n    return NextResponse.json({ body: \"OK\" }, { status: 200 });\r\n  }\r\n  const folder = STORAGE_KEY;\r\n  const fileName = `${folder}/backup.json`;\r\n\r\n  const requestUrl = new URL(req.url);\r\n  let endpoint = requestUrl.searchParams.get(\"endpoint\");\r\n  let proxy_method = requestUrl.searchParams.get(\"proxy_method\") || req.method;\r\n\r\n  // Validate the endpoint to prevent potential SSRF attacks\r\n  if (\r\n    !endpoint ||\r\n    !mergedAllowedWebDavEndpoints.some((allowedEndpoint) => {\r\n      const normalizedAllowedEndpoint = normalizeUrl(allowedEndpoint);\r\n      const normalizedEndpoint = normalizeUrl(endpoint as string);\r\n\r\n      return (\r\n        normalizedEndpoint &&\r\n        normalizedEndpoint.hostname === normalizedAllowedEndpoint?.hostname &&\r\n        normalizedEndpoint.pathname.startsWith(\r\n          normalizedAllowedEndpoint.pathname,\r\n        )\r\n      );\r\n    })\r\n  ) {\r\n    return NextResponse.json(\r\n      {\r\n        error: true,\r\n        msg: \"Invalid endpoint\",\r\n      },\r\n      {\r\n        status: 400,\r\n      },\r\n    );\r\n  }\r\n\r\n  if (!endpoint?.endsWith(\"/\")) {\r\n    endpoint += \"/\";\r\n  }\r\n\r\n  const endpointPath = params.path.join(\"/\");\r\n  const targetPath = `${endpoint}${endpointPath}`;\r\n\r\n  // only allow MKCOL, GET, PUT\r\n  if (\r\n    proxy_method !== \"MKCOL\" &&\r\n    proxy_method !== \"GET\" &&\r\n    proxy_method !== \"PUT\"\r\n  ) {\r\n    return NextResponse.json(\r\n      {\r\n        error: true,\r\n        msg: \"you are not allowed to request \" + targetPath,\r\n      },\r\n      {\r\n        status: 403,\r\n      },\r\n    );\r\n  }\r\n\r\n  // for MKCOL request, only allow request ${folder}\r\n  if (proxy_method === \"MKCOL\" && !targetPath.endsWith(folder)) {\r\n    return NextResponse.json(\r\n      {\r\n        error: true,\r\n        msg: \"you are not allowed to request \" + targetPath,\r\n      },\r\n      {\r\n        status: 403,\r\n      },\r\n    );\r\n  }\r\n\r\n  // for GET request, only allow request ending with fileName\r\n  if (proxy_method === \"GET\" && !targetPath.endsWith(fileName)) {\r\n    return NextResponse.json(\r\n      {\r\n        error: true,\r\n        msg: \"you are not allowed to request \" + targetPath,\r\n      },\r\n      {\r\n        status: 403,\r\n      },\r\n    );\r\n  }\r\n\r\n  //   for PUT request, only allow request ending with fileName\r\n  if (proxy_method === \"PUT\" && !targetPath.endsWith(fileName)) {\r\n    return NextResponse.json(\r\n      {\r\n        error: true,\r\n        msg: \"you are not allowed to request \" + targetPath,\r\n      },\r\n      {\r\n        status: 403,\r\n      },\r\n    );\r\n  }\r\n\r\n  const targetUrl = targetPath;\r\n\r\n  const method = proxy_method || req.method;\r\n  const shouldNotHaveBody = [\"get\", \"head\"].includes(\r\n    method?.toLowerCase() ?? \"\",\r\n  );\r\n\r\n  const fetchOptions: RequestInit = {\r\n    headers: {\r\n      authorization: req.headers.get(\"authorization\") ?? \"\",\r\n    },\r\n    body: shouldNotHaveBody ? null : req.body,\r\n    redirect: \"manual\",\r\n    method,\r\n    // @ts-ignore\r\n    duplex: \"half\",\r\n  };\r\n\r\n  let fetchResult;\r\n\r\n  try {\r\n    fetchResult = await fetch(targetUrl, fetchOptions);\r\n  } finally {\r\n    console.log(\r\n      \"[Any Proxy]\",\r\n      targetUrl,\r\n      {\r\n        method: method,\r\n      },\r\n      {\r\n        status: fetchResult?.status,\r\n        statusText: fetchResult?.statusText,\r\n      },\r\n    );\r\n  }\r\n\r\n  return fetchResult;\r\n}\r\n\r\nexport const PUT = handle;\r\nexport const GET = handle;\r\nexport const OPTIONS = handle;\r\n\r\nexport const runtime = \"edge\";\r\n","import { AppRouteRouteModule } from \"next/dist/server/future/route-modules/app-route/module.compiled\";\nimport { RouteKind } from \"next/dist/server/future/route-kind\";\nimport { patchFetch as _patchFetch } from \"next/dist/server/lib/patch-fetch\";\nimport * as userland from \"D:\\\\z-toolkit\\\\NextChat\\\\app\\\\api\\\\webdav\\\\[...path]\\\\route.ts\";\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"standalone\"\nconst routeModule = new AppRouteRouteModule({\n    definition: {\n        kind: RouteKind.APP_ROUTE,\n        page: \"/api/webdav/[...path]/route\",\n        pathname: \"/api/webdav/[...path]\",\n        filename: \"route\",\n        bundlePath: \"app/api/webdav/[...path]/route\"\n    },\n    resolvedPagePath: \"D:\\\\z-toolkit\\\\NextChat\\\\app\\\\api\\\\webdav\\\\[...path]\\\\route.ts\",\n    nextConfigOutput,\n    userland\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks, headerHooks, staticGenerationBailout } = routeModule;\nconst originalPathname = \"/api/webdav/[...path]/route\";\nfunction patchFetch() {\n    return _patchFetch({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\nexport { routeModule, requestAsyncStorage, staticGenerationAsyncStorage, serverHooks, headerHooks, staticGenerationBailout, originalPathname, patchFetch,  };\n\n//# sourceMappingURL=app-route.js.map","import { EdgeRouteModuleWrapper } from \"next/dist/server/web/edge-route-module-wrapper\";\n// Import the userland code.\nimport * as module from \"next-app-loader?name=app%2Fapi%2Fwebdav%2F%5B...path%5D%2Froute&page=%2Fapi%2Fwebdav%2F%5B...path%5D%2Froute&pagePath=private-next-app-dir%2Fapi%2Fwebdav%2F%5B...path%5D%2Froute.ts&appDir=D%3A%5Cz-toolkit%5CNextChat%5Capp&appPaths=%2Fapi%2Fwebdav%2F%5B...path%5D%2Froute&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!private-next-app-dir/api/webdav/[...path]/route.ts?__next_edge_ssr_entry__\";\nexport const ComponentMod = module;\nexport default EdgeRouteModuleWrapper.wrap(module.routeModule);\n\n//# sourceMappingURL=edge-app-route.js.map"],"names":["module","exports","require","config","getServerSideConfig","mergedAllowedWebDavEndpoints","internalAllowedWebDavEndpoints","allowedWebDavEndpoints","filter","Boolean","domain","trim","normalizeUrl","URL","url","err","handle","req","params","fetchResult","method","NextResponse","json","body","status","folder","STORAGE_KEY","fileName","requestUrl","endpoint","searchParams","get","proxy_method","some","normalizedAllowedEndpoint","allowedEndpoint","normalizedEndpoint","hostname","pathname","startsWith","error","msg","endsWith","endpointPath","path","join","targetPath","shouldNotHaveBody","includes","toLowerCase","fetchOptions","headers","authorization","redirect","duplex","fetch","console","log","statusText","PUT","GET","OPTIONS","runtime","routeModule","module_compiled","AppRouteRouteModule","definition","kind","route_kind","x","APP_ROUTE","page","filename","bundlePath","resolvedPagePath","nextConfigOutput","userland","route_namespaceObject","requestAsyncStorage","staticGenerationAsyncStorage","serverHooks","headerHooks","staticGenerationBailout","originalPathname","patchFetch","patch_fetch","XH","ComponentMod","route_next_edge_ssr_entry_namespaceObject","next_edge_app_route_loaderabsolutePagePath_private_next_app_dir_2Fapi_2Fwebdav_2F_5B_path_5D_2Froute_ts_page_2Fapi_2Fwebdav_2F_5B_path_5D_2Froute_appDirLoader_bmV4dC1hcHAtbG9hZGVyP25hbWU9YXBwJTJGYXBpJTJGd2ViZGF2JTJGJTVCLi4ucGF0aCU1RCUyRnJvdXRlJnBhZ2U9JTJGYXBpJTJGd2ViZGF2JTJGJTVCLi4ucGF0aCU1RCUyRnJvdXRlJnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGd2ViZGF2JTJGJTVCLi4ucGF0aCU1RCUyRnJvdXRlLnRzJmFwcERpcj1EJTNBJTVDei10b29sa2l0JTVDTmV4dENoYXQlNUNhcHAmYXBwUGF0aHM9JTJGYXBpJTJGd2ViZGF2JTJGJTVCLi4ucGF0aCU1RCUyRnJvdXRlJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PXN0YW5kYWxvbmUmcHJlZmVycmVkUmVnaW9uPSZtaWRkbGV3YXJlQ29uZmlnPWUzMCUzRCE_3D_nextConfigOutput_standalone_preferredRegion_middlewareConfig_e30_3D_","edge_route_module_wrapper","a","wrap"],"sourceRoot":""}
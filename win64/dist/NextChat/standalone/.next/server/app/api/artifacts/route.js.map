{"version":3,"file":"app/api/artifacts/route.js","mappings":"mFAAAA,CAAAA,EAAAC,OAAA,CAAAC,QAAA,0CCAAF,CAAAA,EAAAC,OAAA,CAAAC,QAAA,6bCIA,eAAeC,EAAOC,CAAgB,CAAEC,CAAiB,EACvD,IAAMC,EAAeC,CAAAA,EAAAA,EAAAA,CAAAA,IACfC,EAAW,IACf,CAAC,8CAA8C,EAAEF,EAAaG,mBAAmB,CAAC,uBAAuB,EAAEH,EAAaI,uBAAuB,CAAC,CAAC,CAC7IC,EAAe,IAAO,EAC1BC,cAAe,CAAC,OAAO,EAAEN,EAAaO,kBAAkB,CAAC,CAAC,CAC5D,EACA,GAAIT,SAAAA,EAAIU,MAAM,CAAa,CACzB,IAAMC,EAAa,MAAMX,EAAIY,IAAI,GAC3BC,EAAaC,IAAAA,IAAQ,CAACH,GAAYI,IAAI,GACtCC,EAIF,CACFC,IAAKJ,EACLK,MAAOP,CACT,EACA,GAAI,CACF,IAAMQ,EAAMC,SAASlB,EAAamB,eAAe,EAC7CF,EAAM,IACRH,CAAAA,EAAK,cAAiB,CAAGG,CAAAA,CAE7B,CAAE,MAAOG,EAAG,CACVC,QAAQC,KAAK,CAACF,EAChB,CACA,IAAMrB,EAAM,MAAMwB,MAAM,CAAC,EAAErB,IAAW,KAAK,CAAC,CAAE,CAC5CsB,QAAS,CACP,GAAGnB,GAAc,CACjB,eAAgB,kBAClB,EACAG,OAAQ,MACRM,KAAMW,KAAKC,SAAS,CAAC,CAACZ,EAAK,CAC7B,GACMa,EAAS,MAAM5B,EAAI6B,IAAI,SAE7B,CADAP,QAAQQ,GAAG,CAAC,YAAaF,GACrBA,GAAQG,SACHC,EAAAA,EAAYA,CAACH,IAAI,CACtB,CAAEI,KAAM,EAAGC,GAAItB,EAAYgB,OAAAA,CAAO,EAClC,CAAEO,OAAQnC,EAAImC,MAAM,GAGjBH,EAAAA,EAAYA,CAACH,IAAI,CACtB,CAAEN,MAAO,GAAMa,IAAK,iBAAkB,EACtC,CAAED,OAAQ,GAAI,EAElB,CACA,GAAIpC,QAAAA,EAAIU,MAAM,CAAY,CACxB,IAAMyB,EAAKnC,GAAKsC,SAASC,cAAcC,IAAI,MACrCvC,EAAM,MAAMwB,MAAM,CAAC,EAAErB,IAAW,QAAQ,EAAE+B,EAAG,CAAC,CAAE,CACpDT,QAASnB,IACTG,OAAQ,KACV,GACA,OAAO,IAAI+B,SAASxC,EAAIe,IAAI,CAAE,CAC5BoB,OAAQnC,EAAImC,MAAM,CAClBM,WAAYzC,EAAIyC,UAAU,CAC1BhB,QAASzB,EAAIyB,OAAO,EAExB,CACA,OAAOO,EAAAA,EAAYA,CAACH,IAAI,CACtB,CAAEN,MAAO,GAAMa,IAAK,iBAAkB,EACtC,CAAED,OAAQ,GAAI,EAElB,CAEO,IAAMO,EAAO5C,EACP6C,EAAM7C,EAEN8C,EAAU,OCjEvBC,EAAA,IAAwBC,EAAAC,mBAAmB,EAC3CC,WAAA,CACAC,KAAcC,EAAAC,CAAS,CAAAC,SAAA,CACvBC,KAAA,uBACAC,SAAA,iBACAC,SAAA,QACAC,WAAA,yBACA,EACAC,iBAAA,yDACAC,iBAVA,aAWAC,SAAYC,CACZ,GAIA,CAAQC,oBAAAA,CAAA,CAAAC,6BAAAA,CAAA,CAAAC,YAAAA,CAAA,CAAAC,YAAAA,CAAA,CAAAC,wBAAAA,CAAA,EAAuGpB,EAC/GqB,EAAA,uBACA,SAAAC,IACA,MAAW,GAAAC,EAAAC,EAAA,EAAW,CACtBN,YAAAA,EACAD,6BAAAA,CACA,EACA,CC1BO,IAAAQ,EAAqBC,EAC5BC,EAAeC,EAAAC,CAAsB,CAAAC,IAAA,CAAM9B","sources":["webpack://_N_E/external commonjs \"node:async_hooks\"","webpack://_N_E/external commonjs \"node:buffer\"","webpack://_N_E/./app/api/artifacts/route.ts","webpack://_N_E/./app/api/artifacts/route.ts?c4e3","webpack://_N_E/?763e","webpack://_N_E/<anon>"],"sourcesContent":["module.exports = require(\"node:async_hooks\");","module.exports = require(\"node:buffer\");","import md5 from \"spark-md5\";\r\nimport { NextRequest, NextResponse } from \"next/server\";\r\nimport { getServerSideConfig } from \"@/app/config/server\";\r\n\r\nasync function handle(req: NextRequest, res: NextResponse) {\r\n  const serverConfig = getServerSideConfig();\r\n  const storeUrl = () =>\r\n    `https://api.cloudflare.com/client/v4/accounts/${serverConfig.cloudflareAccountId}/storage/kv/namespaces/${serverConfig.cloudflareKVNamespaceId}`;\r\n  const storeHeaders = () => ({\r\n    Authorization: `Bearer ${serverConfig.cloudflareKVApiKey}`,\r\n  });\r\n  if (req.method === \"POST\") {\r\n    const clonedBody = await req.text();\r\n    const hashedCode = md5.hash(clonedBody).trim();\r\n    const body: {\r\n      key: string;\r\n      value: string;\r\n      expiration_ttl?: number;\r\n    } = {\r\n      key: hashedCode,\r\n      value: clonedBody,\r\n    };\r\n    try {\r\n      const ttl = parseInt(serverConfig.cloudflareKVTTL as string);\r\n      if (ttl > 60) {\r\n        body[\"expiration_ttl\"] = ttl;\r\n      }\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n    const res = await fetch(`${storeUrl()}/bulk`, {\r\n      headers: {\r\n        ...storeHeaders(),\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      method: \"PUT\",\r\n      body: JSON.stringify([body]),\r\n    });\r\n    const result = await res.json();\r\n    console.log(\"save data\", result);\r\n    if (result?.success) {\r\n      return NextResponse.json(\r\n        { code: 0, id: hashedCode, result },\r\n        { status: res.status },\r\n      );\r\n    }\r\n    return NextResponse.json(\r\n      { error: true, msg: \"Save data error\" },\r\n      { status: 400 },\r\n    );\r\n  }\r\n  if (req.method === \"GET\") {\r\n    const id = req?.nextUrl?.searchParams?.get(\"id\");\r\n    const res = await fetch(`${storeUrl()}/values/${id}`, {\r\n      headers: storeHeaders(),\r\n      method: \"GET\",\r\n    });\r\n    return new Response(res.body, {\r\n      status: res.status,\r\n      statusText: res.statusText,\r\n      headers: res.headers,\r\n    });\r\n  }\r\n  return NextResponse.json(\r\n    { error: true, msg: \"Invalid request\" },\r\n    { status: 400 },\r\n  );\r\n}\r\n\r\nexport const POST = handle;\r\nexport const GET = handle;\r\n\r\nexport const runtime = \"edge\";\r\n","import { AppRouteRouteModule } from \"next/dist/server/future/route-modules/app-route/module.compiled\";\nimport { RouteKind } from \"next/dist/server/future/route-kind\";\nimport { patchFetch as _patchFetch } from \"next/dist/server/lib/patch-fetch\";\nimport * as userland from \"D:\\\\z-toolkit\\\\NextChat\\\\app\\\\api\\\\artifacts\\\\route.ts\";\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"standalone\"\nconst routeModule = new AppRouteRouteModule({\n    definition: {\n        kind: RouteKind.APP_ROUTE,\n        page: \"/api/artifacts/route\",\n        pathname: \"/api/artifacts\",\n        filename: \"route\",\n        bundlePath: \"app/api/artifacts/route\"\n    },\n    resolvedPagePath: \"D:\\\\z-toolkit\\\\NextChat\\\\app\\\\api\\\\artifacts\\\\route.ts\",\n    nextConfigOutput,\n    userland\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks, headerHooks, staticGenerationBailout } = routeModule;\nconst originalPathname = \"/api/artifacts/route\";\nfunction patchFetch() {\n    return _patchFetch({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\nexport { routeModule, requestAsyncStorage, staticGenerationAsyncStorage, serverHooks, headerHooks, staticGenerationBailout, originalPathname, patchFetch,  };\n\n//# sourceMappingURL=app-route.js.map","import { EdgeRouteModuleWrapper } from \"next/dist/server/web/edge-route-module-wrapper\";\n// Import the userland code.\nimport * as module from \"next-app-loader?name=app%2Fapi%2Fartifacts%2Froute&page=%2Fapi%2Fartifacts%2Froute&pagePath=private-next-app-dir%2Fapi%2Fartifacts%2Froute.ts&appDir=D%3A%5Cz-toolkit%5CNextChat%5Capp&appPaths=%2Fapi%2Fartifacts%2Froute&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!private-next-app-dir/api/artifacts/route.ts?__next_edge_ssr_entry__\";\nexport const ComponentMod = module;\nexport default EdgeRouteModuleWrapper.wrap(module.routeModule);\n\n//# sourceMappingURL=edge-app-route.js.map"],"names":["module","exports","require","handle","req","res","serverConfig","getServerSideConfig","storeUrl","cloudflareAccountId","cloudflareKVNamespaceId","storeHeaders","Authorization","cloudflareKVApiKey","method","clonedBody","text","hashedCode","md5","trim","body","key","value","ttl","parseInt","cloudflareKVTTL","e","console","error","fetch","headers","JSON","stringify","result","json","log","success","NextResponse","code","id","status","msg","nextUrl","searchParams","get","Response","statusText","POST","GET","runtime","routeModule","module_compiled","AppRouteRouteModule","definition","kind","route_kind","x","APP_ROUTE","page","pathname","filename","bundlePath","resolvedPagePath","nextConfigOutput","userland","route_namespaceObject","requestAsyncStorage","staticGenerationAsyncStorage","serverHooks","headerHooks","staticGenerationBailout","originalPathname","patchFetch","patch_fetch","XH","ComponentMod","route_next_edge_ssr_entry_namespaceObject","next_edge_app_route_loaderabsolutePagePath_private_next_app_dir_2Fapi_2Fartifacts_2Froute_ts_page_2Fapi_2Fartifacts_2Froute_appDirLoader_bmV4dC1hcHAtbG9hZGVyP25hbWU9YXBwJTJGYXBpJTJGYXJ0aWZhY3RzJTJGcm91dGUmcGFnZT0lMkZhcGklMkZhcnRpZmFjdHMlMkZyb3V0ZSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRmFydGlmYWN0cyUyRnJvdXRlLnRzJmFwcERpcj1EJTNBJTVDei10b29sa2l0JTVDTmV4dENoYXQlNUNhcHAmYXBwUGF0aHM9JTJGYXBpJTJGYXJ0aWZhY3RzJTJGcm91dGUmcGFnZUV4dGVuc2lvbnM9dHN4JnBhZ2VFeHRlbnNpb25zPXRzJnBhZ2VFeHRlbnNpb25zPWpzeCZwYWdlRXh0ZW5zaW9ucz1qcyZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9c3RhbmRhbG9uZSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEIQ_3D_3D_nextConfigOutput_standalone_preferredRegion_middlewareConfig_e30_3D_","edge_route_module_wrapper","a","wrap"],"sourceRoot":""}